<!--2015-01-11 10:56:12-->
В посте про ["Звездное небо на Canvas"](http://egaxegax.appspot.com/guestbook/532002) я уже описывал проект, где при помощи JavaScript на канвасе 2d формируется изображение глобуса Земли на фоне звезд, планет и орбит космических аппаратов. Для создания трехмерной картины звездного неба на плоскости я использовал формулы перевода трехмерных координат X, Y, Z отображаемых объектов: звезды, планеты, космические аппараты (КА), - в плоские декартовые координаты X, Y. Основную часть этих формул я взял из проекта [Marble](https://marble.kde.org/) для KDE. Портированный с C++ на JavaScript код я сохранил в файле **starry.js**.

![sky3d](https://img-fotki.yandex.ru/get/15512/136640652.1/0_1018c4_de8ac91d_orig.png)

Уже тогда я знал, что для вывода трехмерных объектов у канваса есть специальный движок webGL. Но для того, чтобы им воспользоваться нужно было близко познакомиться с этой технологией, а самое главное - найти качественные и понятные примеры его реализации. Те примеры, которые я смотрел, например, [khronos](https://www.khronos.org/registry/webgl/sdk/demos/webkit/Earth.html) с библиотеками J3DI0000.js и J3DIMath.js от Apple для работы с webGL, меня не вдохновляли: код громоздкий и сложный. Все изменилось, когда я познакомился с проектом [three.js](https://github.com/mrdoob/three.js). Простота написания кода и огромное количество примеров (работающих в оффлайне) в нем удивили и порадовали одновременно.

Уже почти закончив свою версию звездного неба в 3d, я познакомился с еще одним очень интересным проектом на [apoapys.com](http://apoapsys.com). Автор с помощью скриптов three.js воспроизводит объекты Солнечной Системы с эффектами, как в самой Celesia - эталонным для многих звездых проектов астрономическом атласе с открытым кодом. Из проекта apoapsys.com я позаимствовал координаты созвездий (файл **sfa_constellation_lines.js**), картинки для текстур звезд, облаков и космических аппаратов.

Свой код трехмерного неба, как и в плоской версии, я постарался сделать максимально простым и компактным, чтобы в нем легко можно было разобраться. Кроме того, я решил не использовать метод **window.requestAnimationFrame**, как в большинстве примеров из three.js и apoapsys.com, поскольку его использование сильно нагружает браузер и процессор. Для этого я использовал код из **OrbitControls.js** из three.js для управления камерой. Посмотреть трехмерную версию неба можно все там же на сайте проекта [dbcartajs](http://dbcartajs.appspot.com/sky3d.html).

### Что нового

В отличие от плоской версии неба здесь объекты Солнечной Системы показаны с учетом их реальных размеров и расстояний до них в км.

Для расчета орбит и положений КА используется код из **satellite.js**, как и в плоской версии. Данные о положении КА (TLE) обновлены с celestrak.com. В **tledata.js** добавил данные о группировках GLONASS, GPS, ISS (космические станции в т.ч. МКС).

### Управление

Управлять камерой можно мышью - поворот правой, смещение левой кнопкой и масштабирование колесиком, ма, стрелками на клавиатуре или через touch-интерфейс на сенсорных экранах. Собственно все события управления обрабатывает код из **OrbitControls.js**.

### Что еще

В планах научиться фокусировать в центре сцены другие объекты, кроме Земли, также добавить новые объекты - астероиды, кометы.